{% extends './layout/default' %}

{% block title %}{{ subTitle }}{% endblock %}

{% block styles %}
    <link rel="stylesheet" href="{{ asset('css/table-sorting.css') }}?v={{ "now"|date("U") }}" type="text/css" media="all" nonce="{{ JS_NONCE }}">
    <style nonce="{{ JS_NONCE }}">
        /* Inline fallback styles for inactive rows */
        .row-inactive {
            opacity: 0.7 !important;
            color: #999 !important;
        }
        .row-inactive td {
            color: #999 !important;
        }
    </style>
{% endblock %}

{% block content %}
    {{ dump('Template rendering started at: ' ~ "now"|date("Y-m-d H:i:s.u")) }}
    <script nonce="{{ JS_NONCE }}">
        console.log('Template rendering started at:', new Date().toISOString());
        console.log('Template start - accounts count:', {{ accounts|length }});
    </script>
    <!-- DEBUG: Template start marker -->
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">
                        <i class="fa {{ subTitleIcon }}"></i>
                        {{ subTitle }}
                    </h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-warning btn-sm sync-all-accounts-btn" 
                                title="Sync All Accounts" data-account-type="all">
                            <span class="fa fa-refresh"></span> Sync All
                        </button>
                        <button type="button" class="btn btn-outline-primary btn-sm match-unknown-btn" 
                                title="Match UNKNOWN counterparties" style="margin-left:6px;">
                            <span class="fa fa-link"></span> Match UNKNOWN
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <!-- Quick Toggle Controls -->
                    <div class="row" style="margin-bottom: 15px;">
                        <div class="col-md-12">
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" id="showInactiveAccounts">
                                    <i class="fa fa-eye"></i> Show inactive accounts
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Search and Filter Controls -->
                    <div class="row" style="margin-bottom: 20px;">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control" id="accountSearch" placeholder="Search accounts...">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <select class="form-control" id="accountTypeFilter">
                                <option value="">All Types</option>
                                {% set uniqueTypes = [] %}
                                {% for account in accounts %}
                                    {% if account.accountType.type not in uniqueTypes %}
                                        {% set uniqueTypes = uniqueTypes|merge([account.accountType.type]) %}
                                        <option value="{{ account.accountType.type }}">{{ account.accountType.type|title }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-control" id="institutionFilter">
                                <option value="">All Institutions</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-control" id="statusFilter">
                                <option value="">All Status</option>
                                <option value="active">Active Only</option>
                                <option value="inactive">Inactive Only</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <select class="form-control" id="pageSizeSelector">
                                <option value="50" {% if pageSize == 50 %}selected{% endif %}>50 per page</option>
                                <option value="100" {% if pageSize == 100 %}selected{% endif %}>100 per page</option>
                                <option value="200" {% if pageSize == 200 %}selected{% endif %}>200 per page</option>
                                <option value="500" {% if pageSize == 500 %}selected{% endif %}>500 per page</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <button type="button" class="btn btn-default btn-block" id="clearFilters">
                                <i class="fa fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                    
                    <!-- Results Summary -->
                    <div class="row" style="margin-bottom: 15px;">
                        <div class="col-md-12">
                            <p class="text-muted">
                                Showing <span id="visibleCount">{{ visibleAccounts }}</span> of <span id="totalCount">{{ totalAccounts }}</span> accounts
                            </p>
                        </div>
                    </div>
                    
                    <!-- Accounts Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="accounts-table">
                            <thead>
                                <tr>
                                    <th data-defaultsign="institution" data-column="institution" class="sortable-header">
                                        {% if sortColumn == 'institution' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.institution') }}
                                    </th>
                                    <th data-defaultsign="account_type" data-column="account_type" class="sortable-header">
                                        {% if sortColumn == 'account_type' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('list.account_type') }}
                                    </th>
                                    <th data-defaultsign="account_holders" data-column="account_holders" class="sortable-header">
                                        {% if sortColumn == 'account_holders' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.account_holders') }}
                                    </th>
                                    <th data-defaultsign="name" data-column="name" class="sortable-header">
                                        {% if sortColumn == 'name' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.product_name') }}
                                    </th>
                                    <th data-defaultsign="account_number" data-column="account_number" class="sortable-header">
                                        {% if sortColumn == 'account_number' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.account_number') }}
                                    </th>
                                    <th data-defaultsign="beneficiaries" data-column="beneficiaries" class="sortable-header">
                                        {% if sortColumn == 'beneficiaries' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.beneficiaries') }}
                                    </th>
                                    <th data-defaultsign="balance" data-column="balance" class="sortable-header">
                                        {% if sortColumn == 'balance' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.balance') }}
                                    </th>
                                    <th data-defaultsign="active" data-column="active" class="sortable-header">
                                        {% if sortColumn == 'active' %}
                                            <i class="fa fa-sort-{{ sortDirection == 'asc' ? 'asc' : 'desc' }}"></i>
                                        {% else %}
                                            <i class="fa fa-sort sort-inactive"></i>
                                        {% endif %}
                                        {{ trans('firefly.active') }}
                                    </th>
                                    <th data-defaultsort="disabled">{{ trans('list.actions') }}</th>
                                </tr>
                            </thead>
                            <tbody id="accountsTableBody">
                                {% for account in accounts %}
                                        {% set data = accountData[account.id] %}
                                        <tr data-account-type="{{ account.accountType.type }}" 
                                            data-institution="{{ data.institution_lower }}"
                                            data-status="{{ data.status }}"
                                            class="{{ data.active_class }}">
                                            <td data-value="{{ data.institution_lower }}">
                                                {% if data.institution %}
                                                    {% if account.institutionEntity %}
                                                        <a href="{{ route('financial-entities.show', account.institutionEntity.id) }}" class="text-primary">
                                                            {{ data.institution }}
                                                        </a>
                                                    {% else %}
                                                        {{ data.institution }}
                                                    {% endif %}
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ data.account_type_lower }}">
                                                {% if data.account_type %}
                                                    {{ data.account_type }}
                                                {% else %}
                                                    {{ account.accountType.type }}
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ data.holders_lower }}">
                                                {% if data.holders|length > 0 %}
                                                    {% for holder in data.holders %}
                                                        {% if holder.id %}
                                                            <a href="{{ route('financial-entities.show', holder.id) }}" class="text-primary">
                                                                {{ holder.name }}
                                                        </a>
                                                        {% else %}
                                                            {{ holder.name }}
                                                        {% endif %}
                                                        {% if not loop.last %}, {% endif %}
                                                    {% endfor %}
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ data.product_name_lower }}">
                                                {% if data.product_name %}
                                                    {{ data.product_name }}
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ data.account_number_lower }}">
                                                {% if data.account_number %}
                                                    {{ data.account_number }}
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ data.beneficiaries_count }}">
                                                {% if data.beneficiaries_count > 0 %}
                                                    <span class="label label-info" title="View details for beneficiary information">
                                                        <i class="fa fa-users"></i> {{ data.beneficiaries_count }} beneficiary{{ data.beneficiaries_count != 1 ? 'ies' : '' }}
                                                    </span>
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td data-value="{{ account.current_balance }}" style="text-align: right;">
                                                {% if account.current_balance is not null %}
                                                    {% if account.accountType.type in ['Asset account', 'Default account', 'Brokerage account', 'Holding account'] %}
                                                        <span class="text-success">
                                                            {{ formatAmountBySymbol(account.current_balance, account.currency_symbol, account.currency_decimal_places) }}
                                                        </span>
                                                    {% elseif account.accountType.type in ['Loan', 'Debt', 'Mortgage', 'Credit card'] %}
                                                        <span class="text-danger">
                                                            {{ formatAmountBySymbol(account.current_balance, account.currency_symbol, account.currency_decimal_places) }}
                                                        </span>
                                                    {% else %}
                                                        {{ formatAmountBySymbol(account.current_balance, account.currency_symbol, account.currency_decimal_places) }}
                                                    {% endif %}
                                                {% else %}
                                                    <span class="text-muted">-</span>
                                                {% endif %}
                                            </td>
                                            <td class="text-center" data-value="{% if account.active %}active{% else %}inactive{% endif %}">
                                                <input type="checkbox" class="account-active" data-account-id="{{ account.id }}" {% if account.active %}checked{% endif %}>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-xs">
                                                    <a href="{{ route('accounts.show', account.id) }}" class="btn btn-default btn-xs" title="View">
                                                        <i class="fa fa-eye"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-primary btn-xs edit-account-btn" data-account-id="{{ account.id }}" title="Edit">
                                                        <i class="fa fa-pencil"></i>
                                                    </button>
                                                    {% if account.accountType.type in ['Asset account', 'Default account', 'Brokerage account', 'Holding account', 'Credit card', 'Loan', 'Debt', 'Mortgage'] %}
                                                    <button type="button" class="btn btn-warning btn-xs sync-account-btn" 
                                                            title="Sync Account" data-account-id="{{ account.id }}" data-account-name="{{ account.name }}">
                                                        <i class="fa fa-refresh"></i>
                                                    </button>
                                                    {% endif %}
                                                    <a href="{{ route('accounts.delete', account.id) }}" class="btn btn-danger btn-xs" title="Delete">
                                                        <i class="fa fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                {% endfor %}
                                <script nonce="{{ JS_NONCE }}">
                                    console.log('Account loop completed at:', new Date().toISOString());
                                </script>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Account Edit Modal Container -->
    <div id="editModalContainer"></div>
    <script nonce="{{ JS_NONCE }}">console.log('Template rendering completed at:', new Date().toISOString());</script>
    <!-- DEBUG: Template end marker -->

{% endblock %}

{% block scripts %}
    
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        console.log('JavaScript execution started at:', new Date().toISOString());
        $(document).ready(function() {
            console.log('jQuery document ready fired at:', new Date().toISOString());
            
            // Debug table sorting (temporarily disabled)
            // $('.table th[data-defaultsign]').on('click', function() {
            //     const column = $(this).attr('data-defaultsign');
            //     console.log('Sorting by column:', column);
            // });
            // Initialize filtering system
            initializeAccountFiltering();
            
            // Handle sync all accounts buttons
            $('.sync-all-accounts-btn').on('click', function() {
                var btn = $(this);
                var accountType = btn.data('account-type');
                
                btn.prop('disabled', true);
                btn.find('span').removeClass('fa-refresh').addClass('fa-spinner fa-spin');
                btn.find('span').after(' Syncing...');
                
                // Get all asset accounts for this section
                var accountIds = [];
                btn.closest('.panel').find('tbody tr').each(function() {
                    var accountId = $(this).find('a[href*="/accounts/"]').attr('href');
                    if (accountId) {
                        accountId = accountId.match(/\/accounts\/(\d+)/);
                        if (accountId && accountId[1]) {
                            accountIds.push(parseInt(accountId[1]));
                        }
                    }
                });
                
                if (accountIds.length === 0) {
                    alert('No accounts found to sync');
                    resetButton(btn);
                    return;
                }
                
                // Call the sync API for each account
                var promises = accountIds.map(function(accountId) {
                    return $.ajax({
                        url: '/api/v1/pfinance/consolidate-and-generate-transactions-for-account',
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                        },
                        data: JSON.stringify({
                            account_id: accountId.toString()
                        })
                    });
                });
                
                Promise.all(promises).then(function(results) {
                    var totalProcessed = results.reduce(function(sum, result) {
                        return sum + (result.result ? result.result.processed : 0);
                    }, 0);
                    alert('Sync completed! Processed ' + totalProcessed + ' transactions across ' + accountIds.length + ' accounts.');
                    window.location.reload();
                }).catch(function(error) {
                    console.error('Sync failed:', error);
                    alert('Sync failed: ' + (error.responseJSON && error.responseJSON.message ? error.responseJSON.message : 'Unknown error'));
                }).finally(function() {
                    resetButton(btn);
                });
            });
            
            // Handle match unknown button
            $('.match-unknown-btn').on('click', function() {
                var btn = $(this);
                btn.prop('disabled', true);
                btn.find('span').removeClass('fa-link').addClass('fa-spinner fa-spin');
                btn.find('span').after(' Matching...');
                
                $.ajax({
                    url: '/api/v1/pfinance/match-transactions',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: JSON.stringify({
                        window_days: 0,
                        dry_run: false,
                        exclude_account_ids: [2, 3]
                    }),
                    success: function(data) {
                        alert('Matched: ' + (data.result && data.result.matched) + '\nUpdated: ' + (data.result && data.result.updated));
                        window.location.reload();
                    },
                    error: function(xhr, status, error) {
                        console.error('Match request failed:', xhr.responseText);
                        alert('Match request failed: ' + (xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : error));
                    },
                    complete: function() {
                        btn.prop('disabled', false);
                        btn.find('span').removeClass('fa-spinner fa-spin').addClass('fa-link');
                        btn.find('span').next().remove();
                    }
                });
            });
            
            // Handle individual account sync buttons
            $('.sync-account-btn').on('click', function() {
                var btn = $(this);
                var accountId = btn.data('account-id');
                var accountName = btn.data('account-name');
                
                btn.prop('disabled', true);
                btn.find('i').removeClass('fa-refresh').addClass('fa-spinner fa-spin');
                btn.attr('title', 'Syncing...');
                
                $.ajax({
                    url: '/api/v1/pfinance/consolidate-and-generate-transactions-for-account',
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    data: JSON.stringify({
                        account_id: accountId.toString()
                    }),
                    success: function(data) {
                        var processed = data.result ? data.result.processed : 0;
                        alert('Sync completed for ' + accountName + '!\nProcessed ' + processed + ' transactions.');
                        window.location.reload();
                    },
                    error: function(xhr, status, error) {
                        console.error('Sync failed for account ' + accountId + ':', xhr.responseText);
                        alert('Sync failed for ' + accountName + ': ' + (xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Unknown error'));
                    },
                    complete: function() {
                        btn.prop('disabled', false);
                        btn.find('i').removeClass('fa-spinner fa-spin').addClass('fa-refresh');
                        btn.attr('title', 'Sync Account');
                    }
                });
            });
            
            function resetButton(btn) {
                btn.prop('disabled', false);
                btn.find('span').removeClass('fa-spinner fa-spin').addClass('fa-refresh');
                btn.find('span').next().remove();
            }
            
            // Handle edit account button click
            $(document).on('click', '.edit-account-btn', function(e) {
                e.preventDefault();
                var accountId = $(this).data('account-id');
                loadEditModal(accountId);
            });
            
            // Load edit modal content
            function loadEditModal(accountId) {
                // Load modal once if not already loaded
                if ($('#editAccountModal').length === 0) {
                    $.get('{{ route('accounts.edit.modal.new') }}')
                        .done(function(data) {
                            $('#editModalContainer').html(data);
                            // Now load the account data
                            loadEntityEditModal(accountId);
                        })
                        .fail(function() {
                            showErrorAlert('Error loading edit form');
                        });
                } else {
                    // Modal already loaded, just load the account data
                    loadEntityEditModal(accountId);
                }
            }
            
            // Form submission is now handled by the shared modal component
            
            // Alert functions for sync operations
            function showSuccessAlert(message) {
                var alert = '<div class="alert alert-success alert-dismissible fade in" role="alert">' +
                            '<button type="button" class="close" data-dismiss="alert">&times;</button>' +
                            '<strong>Success!</strong> ' + message +
                            '</div>';
                
                $('.content-wrapper .content').prepend(alert);
                
                setTimeout(function() {
                    $('.alert-success').fadeOut();
                }, 5000);
            }
            
            function showErrorAlert(message) {
                var alert = '<div class="alert alert-danger alert-dismissible fade in" role="alert">' +
                            '<button type="button" class="close" data-dismiss="alert">&times;</button>' +
                            '<strong>Error!</strong> ' + message +
                            '</div>';
                
                $('.content-wrapper .content').prepend(alert);
            }
        });
        
        // Account filtering functions
        function initializeAccountFiltering() {
            // Populate institution filter
            populateInstitutionFilter();
            
            // Set up event listeners
            document.getElementById('accountSearch').addEventListener('input', filterAccounts);
            document.getElementById('accountTypeFilter').addEventListener('change', filterAccounts);
            document.getElementById('institutionFilter').addEventListener('change', filterAccounts);
            document.getElementById('statusFilter').addEventListener('change', filterAccounts);
            document.getElementById('clearFilters').addEventListener('click', clearAllFilters);
            
            // Initial count update
            updateAccountCounts();
        }
        
        function populateInstitutionFilter() {
            var institutions = new Set();
            var rows = document.querySelectorAll('#accountsTableBody tr');
            
            rows.forEach(function(row) {
                var institution = row.getAttribute('data-institution');
                if (institution && institution.trim() !== '') {
                    institutions.add(institution);
                }
            });
            
            var institutionFilter = document.getElementById('institutionFilter');
            var options = Array.from(institutions).sort();
            
            // Clear existing options except "All Institutions"
            institutionFilter.innerHTML = '<option value="">All Institutions</option>';
            
            options.forEach(function(institution) {
                var option = document.createElement('option');
                option.value = institution;
                option.textContent = institution.charAt(0).toUpperCase() + institution.slice(1);
                institutionFilter.appendChild(option);
            });
        }
        
        function filterAccounts() {
            var searchTerm = document.getElementById('accountSearch').value.toLowerCase();
            var typeFilter = document.getElementById('accountTypeFilter').value;
            var institutionFilter = document.getElementById('institutionFilter').value;
            var statusFilter = document.getElementById('statusFilter').value;
            
            var rows = document.querySelectorAll('#accountsTableBody tr');
            var visibleCount = 0;
            
            rows.forEach(function(row) {
                var shouldShow = true;
                
                // Search filter
                if (searchTerm) {
                    var searchableText = row.textContent.toLowerCase();
                    if (!searchableText.includes(searchTerm)) {
                        shouldShow = false;
                    }
                }
                
                // Type filter
                if (typeFilter && row.getAttribute('data-account-type') !== typeFilter) {
                    shouldShow = false;
                }
                
                // Institution filter
                if (institutionFilter && row.getAttribute('data-institution') !== institutionFilter) {
                    shouldShow = false;
                }
                
                // Status filter
                if (statusFilter && row.getAttribute('data-status') !== statusFilter) {
                    shouldShow = false;
                }
                
                // Show/hide row
                if (shouldShow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Update counts
            document.getElementById('visibleCount').textContent = visibleCount;
        }
        
        function clearAllFilters() {
            document.getElementById('accountSearch').value = '';
            document.getElementById('accountTypeFilter').value = '';
            document.getElementById('institutionFilter').value = '';
            document.getElementById('statusFilter').value = '';
            
            // Reset checkbox to hide inactive accounts by default
            document.getElementById('showInactiveAccounts').checked = false;
            
            filterAccounts();
        }
        
        // Checkbox handler
        document.getElementById('showInactiveAccounts').addEventListener('change', function() {
            if (this.checked) {
                // Show all accounts (clear status filter)
                document.getElementById('statusFilter').value = '';
            } else {
                // Show only active accounts
                document.getElementById('statusFilter').value = 'active';
            }
            filterAccounts();
        });
        
        // Sync checkbox with dropdown changes
        document.getElementById('statusFilter').addEventListener('change', function() {
            // Update checkbox based on dropdown selection
            if (this.value === 'active') {
                document.getElementById('showInactiveAccounts').checked = false;
            } else {
                document.getElementById('showInactiveAccounts').checked = true;
            }
        });
        
        // Handle account active status checkbox changes
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('account-active')) {
                var accountId = e.target.getAttribute('data-account-id');
                var row = e.target.closest('tr');
                var isActive = e.target.checked;
                
                // Update row classes
                if (isActive) {
                    row.classList.remove('row-inactive');
                    row.classList.add('row-active');
                    row.setAttribute('data-status', 'active');
                } else {
                    row.classList.remove('row-active');
                    row.classList.add('row-inactive');
                    row.setAttribute('data-status', 'inactive');
                }
                
                // Mark row as changed for saving
                row.setAttribute('data-changed', 'true');
                
                // Show save button if not already visible
                showSaveButton();
            }
        });
        
        // Show save button when changes are made
        function showSaveButton() {
            var saveButton = document.getElementById('saveAccountChanges');
            if (!saveButton) {
                // Create save button
                var buttonHtml = '<button type="button" class="btn btn-success btn-sm" id="saveAccountChanges" style="margin-left: 10px;">' +
                                '<i class="fa fa-save"></i> Save Changes' +
                                '</button>';
                document.querySelector('.box-tools.pull-right').insertAdjacentHTML('beforeend', buttonHtml);
                
                // Add click handler
                document.getElementById('saveAccountChanges').addEventListener('click', saveAccountChanges);
            }
        }
        
        // Save account changes
        function saveAccountChanges() {
            var changedRows = document.querySelectorAll('tr[data-changed="true"]');
            var changes = [];
            
            changedRows.forEach(function(row) {
                var accountId = row.querySelector('.account-active').getAttribute('data-account-id');
                var isActive = row.querySelector('.account-active').checked;
                changes.push({
                    id: accountId,
                    active: isActive
                });
            });
            
            if (changes.length === 0) {
                return;
            }
            
            // Show loading state
            var saveButton = document.getElementById('saveAccountChanges');
            var originalText = saveButton.innerHTML;
            saveButton.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving...';
            saveButton.disabled = true;
            
            // Send AJAX request
            fetch('/api/v1/accounts/bulk-update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ changes: changes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove changed markers
                    changedRows.forEach(function(row) {
                        row.removeAttribute('data-changed');
                    });
                    
                    // Remove save button
                    saveButton.remove();
                    
                    // Show success message
                    showSuccessAlert('Account statuses updated successfully!');
                } else {
                    throw new Error(data.message || 'Failed to update account statuses');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorAlert('Failed to update account statuses: ' + error.message);
                
                // Restore button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            });
        }
        
        function updateAccountCounts() {
            var totalRows = document.querySelectorAll('#accountsTableBody tr').length;
            var visibleRows = document.querySelectorAll('#accountsTableBody tr:not([style*="display: none"])').length;
            
            document.getElementById('totalCount').textContent = totalRows;
            document.getElementById('visibleCount').textContent = visibleRows;
        }
        
        // Initialize page with default settings
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔧 [DEBUG] DOMContentLoaded - Starting initialization');
            
            // Set default state: hide inactive accounts
            document.getElementById('showInactiveAccounts').checked = false;
            document.getElementById('statusFilter').value = 'active';
            console.log('🔧 [DEBUG] Set default filter state: hide inactive accounts');
            
            // Apply initial filter
            filterAccounts();
            console.log('🔧 [DEBUG] Applied initial filter');
            
            // Check initial table state
            var table = document.getElementById('accounts-table');
            var rows = table.querySelectorAll('tbody tr');
            console.log('🔧 [DEBUG] Initial table state:', {
                totalRows: rows.length,
                firstInstitution: rows[0] ? rows[0].querySelector('td').textContent.trim() : 'none',
                lastInstitution: rows[rows.length-1] ? rows[rows.length-1].querySelector('td').textContent.trim() : 'none'
            });
            
            // Server should now send data in correct A-Z order
            console.log('🔧 [DEBUG] Server should send data in correct A-Z order - no client-side sorting needed');
        });
    </script>
    
    <!-- Table Sorting Assets -->
    <script src="{{ asset('js/table-sorting.js') }}" nonce="{{ JS_NONCE }}"></script>
    
    <!-- Server-side sorting using shared system -->
    <script nonce="{{ JS_NONCE }}">
        $(document).ready(function() {
            // Wait for TableSorting to be available
            function initServerSideSorting() {
                if (typeof TableSorting !== 'undefined') {
                    // Initialize server-side sorting using the shared system
                    TableSorting.initServerSideSorting('#accounts-table', {
                        url: window.location.pathname,
                        method: 'GET',
                        ajax: true
                    });
                } else {
                    // Retry after a short delay
                    setTimeout(initServerSideSorting, 100);
                }
            }
            
            initServerSideSorting();
            
            // Handle page size changes
            $('#pageSizeSelector').on('change', function() {
                const newPageSize = $(this).val();
                
                // Show loading state
                $('#accounts-table').addClass('loading');
                
                // Make AJAX request with new page size
                $.ajax({
                    url: window.location.pathname,
                    method: 'GET',
                    data: {
                        sort: '{{ sortColumn }}',
                        direction: '{{ sortDirection }}',
                        page: 1, // Reset to first page
                        pageSize: newPageSize
                    },
                    success: function(response) {
                        const $newTable = $(response).find('#accounts-table');
                        const $newTbody = $newTable.find('tbody');
                        const $newThead = $newTable.find('thead');
                        
                        $('#accounts-table tbody').html($newTbody.html());
                        $('#accounts-table thead').html($newThead.html());
                        
                        // Re-initialize server-side sorting
                        if (typeof TableSorting !== 'undefined') {
                            TableSorting.initServerSideSorting('#accounts-table', {
                                url: window.location.pathname,
                                method: 'GET',
                                ajax: true
                            });
                        }
                        
                        // Update URL
                        const url = new URL(window.location);
                        url.searchParams.set('pageSize', newPageSize);
                        url.searchParams.delete('page'); // Reset to page 1
                        window.history.pushState({}, '', url);
                        
                        console.log('🔧 [DEBUG] Page size changed:', {
                            newPageSize: newPageSize,
                            rows_returned: $newTbody.find('tr').length
                        });
                    },
                    error: function(xhr, status, error) {
                        console.error('Page size change failed:', error);
                        alert('Failed to change page size. Please try again.');
                    },
                    complete: function() {
                        $('#accounts-table').removeClass('loading');
                    }
                });
            });
            console.log('jQuery document ready completed at:', new Date().toISOString());
        });
    </script>
{% endblock %}
