{% extends './layout/default' %}

{% block breadcrumbs %}
    <ol class="breadcrumb">
        <li><a href="{{ route('index') }}"><span class="fa fa-home"></span></a></li>
        <li><a href="{{ route('accounts.index', objectType) }}">{{ objectType|title }} Accounts</a></li>
        <li class="active">Import Accounts from JSON</li>
    </ol>
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">
                        {{ subTitle }}
                    </h3>
                </div>
                <div class="box-body">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12">
                            <p>
                                Upload a JSON file (.json) to import multiple accounts at once. The JSON file should contain an array of account objects with explicit account definitions.
                            </p>
                            
                            <div class="alert alert-info">
                                <h4>JSON Structure</h4>
                                <p>The JSON file should be an array of account objects. Each account object can contain:</p>
                                <ul>
                                    <li><strong>name</strong> - Account name (required)</li>
                                    <li><strong>template_name</strong> - Account template name (required) - See available templates below</li>
                                    <li><strong>active</strong> - Active status (true/false, defaults to true)</li>
                                    <li><strong>include_net_worth</strong> - Include in net worth (true/false, defaults to true)</li>
                                    <li><strong>opening_balance</strong> - Opening balance amount</li>
                                    <li><strong>opening_balance_date</strong> - Opening balance date (YYYY-MM-DD)</li>
                                    <li><strong>account_number</strong> - Account number</li>
                                    <li><strong>notes</strong> - Account notes</li>
                                    <li><strong>beneficiaries</strong> - Array of beneficiaries with name, relationship, priority, percentage, email, phone, notes</li>
                                    <li><strong>owner</strong> - Account owner (string, required) - Must match an existing financial entity display name</li>
                                </ul>
                                
                                <h4>Available Template Names:</h4>
                                <div class="row">
                                    <div class="col-md-6">
                                        <h5>Asset Accounts:</h5>
                                        <ul>
                                            <li>personal_checking</li>
                                            <li>business_checking</li>
                                            <li>high_yield_savings</li>
                                            <li>emergency_fund</li>
                                            <li>money_market_account</li>
                                            <li>certificate_of_deposit</li>
                                            <li>business_savings</li>
                                            <li>cash_wallet</li>
                                            <li>cryptocurrency_wallet</li>
                                            <li>roth_ira</li>
                                            <li>traditional_ira</li>
                                            <li>401k</li>
                                            <li>individual_brokerage</li>
                                            <li>joint_brokerage</li>
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <h5>Liability Accounts:</h5>
                                        <ul>
                                            <li>personal_credit_card</li>
                                            <li>business_credit_card</li>
                                            <li>auto_loan</li>
                                            <li>home_mortgage</li>
                                            <li>student_loan</li>
                                            <li>personal_loan</li>
                                            <li>home_equity_loan</li>
                                            <li>business_term_loan</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>

                            {% if entityMapping is not empty %}
                            <div class="alert alert-warning">
                                <h4>Available Entities for Owner Mapping</h4>
                                <p>The following entities are available for mapping the "owner" field in your JSON file:</p>
                                <ul>
                                    {% for displayName, entityId in entityMapping %}
                                        <li><strong>{{ displayName }}</strong> (ID: {{ entityId }})</li>
                                    {% endfor %}
                                </ul>
                                <p><em><strong>Important:</strong> The "owner" field is required for all accounts and must exactly match one of the entity display names listed above. Accounts with missing or unmatched owners will be skipped during import.</em></p>
                            </div>
                            {% else %}
                            <div class="alert alert-warning">
                                <h4>No Entities Available</h4>
                                <p>No financial entities are available for owner mapping. Please create some entities first before importing accounts.</p>
                                <a href="{{ route('financial-entities.index') }}" class="btn btn-primary btn-sm">
                                    <i class="fa fa-plus"></i> Create Financial Entities
                                </a>
                            </div>
                            {% endif %}

                            <div class="alert alert-success">
                                <h4>Example JSON</h4>
                                <pre><code>[
  {
    "name": "Promissory Note - Borrower Name",
    "type": "liability",
    "liability_type": "debt",
    "liability_direction": "credit",
    "interest": "10",
    "interest_period": "yearly",
    "opening_balance": "200000",
    "opening_balance_date": "2023-06-01",
    "active": true,
    "include_net_worth": true
  },
  {
    "name": "Roth IRA - USAA",
    "type": "asset",
    "account_role": "savingAsset",
    "account_number": "123456",
    "opening_balance": "50000",
    "opening_balance_date": "2023-01-01",
    "active": true,
    "include_net_worth": true,
    "beneficiaries": [
      {
        "name": "Katie Bradley",
        "relationship": "spouse",
        "priority": "primary",
        "percentage": 60
      },
      {
        "name": "Child 1",
        "relationship": "child",
        "priority": "primary",
        "percentage": 40
      },
      {
        "name": "Child 2",
        "relationship": "child",
        "priority": "secondary",
        "percentage": 50
      },
      {
        "name": "Child 3",
        "relationship": "child",
        "priority": "secondary",
        "percentage": 50
      }
    ]
  }
]</code></pre>
                            </div>

                            <form id="import-form" enctype="multipart/form-data">
                                {{ csrf_field() }}
                                
                                <div class="form-group">
                                    <label for="json_file">JSON file</label>
                                    <input type="file" class="form-control" id="json_file" name="json_file" accept=".json" required>
                                    <small class="form-text text-muted">
                                        Select a JSON file (.json) with account data. Maximum file size: 10MB.
                                    </small>
                                </div>

                                <div class="form-group">
                                    <button type="submit" class="btn btn-success" id="import-button">
                                        <span class="fa fa-upload fa-fw"></span> Import accounts
                                    </button>
                                    <a href="{{ route('accounts.index', objectType) }}" class="btn btn-default">
                                        <span class="fa fa-arrow-left fa-fw"></span> Back to accounts
                                    </a>
                                </div>
                                
                                <!-- Progress and status messages -->
                                <div id="import-status" class="alert" style="display: none;"></div>
                            </form>
                        </div>
                        
                        <div class="col-lg-4 col-md-4 col-sm-12">
                            <div class="box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Import tips</h3>
                                </div>
                                <div class="box-body">
                                    <ul>
                                        <li>JSON format provides explicit control over account properties</li>
                                        <li>Account names must be unique - duplicates will be skipped</li>
                                        <li>Opening balance dates should be in YYYY-MM-DD format</li>
                                        <li>Liability accounts require liability_type and liability_direction</li>
                                        <li>Asset accounts require account_role</li>
                                        <li>You can edit the JSON file before importing to make adjustments</li>
                                    </ul>
                                </div>
                            </div>
                            
                            <div class="box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Benefits of JSON Import</h3>
                                </div>
                                <div class="box-body">
                                    <ul>
                                        <li><strong>Explicit definitions</strong> - No guessing about field mappings</li>
                                        <li><strong>Easy to edit</strong> - Manually adjust accounts before importing</li>
                                        <li><strong>Version control friendly</strong> - Track changes easily</li>
                                        <li><strong>Debugging</strong> - See exactly what will be created</li>
                                        <li><strong>Reusable</strong> - Same JSON for testing/staging/production</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        // File validation
        document.getElementById('json_file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type === 'application/json') {
                console.log('JSON file selected:', file.name);
            } else if (file) {
                alert('Please select a valid JSON file (.json)');
                e.target.value = '';
            }
        });

        // Form submission via API
        document.getElementById('import-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('json_file');
            const file = fileInput.files[0];
            const importButton = document.getElementById('import-button');
            const statusDiv = document.getElementById('import-status');
            
            if (!file) {
                showStatus('Please select a JSON file.', 'alert-danger');
                return;
            }
            
            // Show loading state
            importButton.disabled = true;
            importButton.innerHTML = '<span class="fa fa-spinner fa-spin fa-fw"></span> Importing...';
            showStatus('Reading and processing JSON file...', 'alert-info');
            
            try {
                // Read the JSON file
                const jsonContent = await readFileAsText(file);
                const accounts = JSON.parse(jsonContent);
                
                if (!Array.isArray(accounts)) {
                    throw new Error('JSON file must contain an array of accounts');
                }
                
                showStatus(`Found ${accounts.length} accounts. Creating accounts...`, 'alert-info');
                
                // Call the API endpoint
                const response = await fetch('/api/v1/pfinance/import-accounts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    credentials: 'same-origin', // Include session cookies
                    body: JSON.stringify({
                        accounts: accounts
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Success
                    const message = `Import completed! Created ${result.created_count} accounts.`;
                    showStatus(message, 'alert-success');
                    
                    if (result.skipped_count > 0) {
                        const skippedMessage = `Skipped ${result.skipped_count} accounts: ${result.skipped_reasons.slice(0, 3).join('; ')}`;
                        showStatus(message + '<br>' + skippedMessage, 'alert-warning');
                    }
                    
                    // Redirect after a delay
                    setTimeout(() => {
                        window.location.href = '{{ route("accounts.index", objectType) }}';
                    }, 3000);
                    
                } else {
                    // Error
                    throw new Error(result.message || 'Import failed');
                }
                
            } catch (error) {
                console.error('Import error:', error);
                showStatus('Import failed: ' + error.message, 'alert-danger');
            } finally {
                // Reset button
                importButton.disabled = false;
                importButton.innerHTML = '<span class="fa fa-upload fa-fw"></span> Import accounts';
            }
        });
        
        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = e => resolve(e.target.result);
                reader.onerror = e => reject(new Error('Failed to read file'));
                reader.readAsText(file);
            });
        }
        
        function showStatus(message, alertClass) {
            const statusDiv = document.getElementById('import-status');
            statusDiv.className = 'alert ' + alertClass;
            statusDiv.innerHTML = message;
            statusDiv.style.display = 'block';
        }
        
    </script>
{% endblock %}
