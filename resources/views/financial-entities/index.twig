{% extends './layout/default' %}

{% set shownDemo = true %}

{% block title %}
    Financial Entities
{% endblock %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.getCurrentRoute().getName()) }}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box" id="financial-entities-index">
                <div class="box-header with-border">
                    <h3 class="box-title">
                        <i class="fa fa-users"></i>
                        Financial Entities
                    </h3>
                    <div class="box-tools pull-right">
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fa fa-plus"></i>
                                Add Entity
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a href="#" class="create-entity-type" data-type="individual">
                                    <i class="fa fa-user"></i> Individual
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="trust">
                                    <i class="fa fa-shield"></i> Trust
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="business">
                                    <i class="fa fa-building"></i> Business
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="advisor">
                                    <i class="fa fa-graduation-cap"></i> Advisor
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="custodian">
                                    <i class="fa fa-lock"></i> Custodian
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="plan_administrator">
                                    <i class="fa fa-cogs"></i> Plan Administrator
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="institution">
                                    <i class="fa fa-university"></i> Institution
                                </a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="box-body">
                    <!-- Search and Filter -->
                    <div class="row" style="margin-bottom: 15px;">
                        <div class="col-md-6">
                            <input type="text" id="search" class="form-control" placeholder="Search entities..." value="{{ searchQuery }}">
                        </div>
                        <div class="col-md-4">
                            <select id="type-filter" class="form-control">
                                <option value="">All Types</option>
                                <option value="individual" {{ typeFilter == 'individual' ? 'selected' : '' }}>Individuals</option>
                                <option value="trust" {{ typeFilter == 'trust' ? 'selected' : '' }}>Trusts</option>
                                <option value="business" {{ typeFilter == 'business' ? 'selected' : '' }}>Businesses</option>
                                <option value="advisor" {{ typeFilter == 'advisor' ? 'selected' : '' }}>Advisors</option>
                                <option value="custodian" {{ typeFilter == 'custodian' ? 'selected' : '' }}>Custodians</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="button" id="clear-filters" class="btn btn-secondary btn-block">Clear</button>
                        </div>
                    </div>

                    <!-- Entities Table -->
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Accounts</th>
                                    <th>Total Balance</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for entity in entities %}
                                    <tr>
                                        <td>
                                            <a href="{{ route('financial-entities.show', entity.id) }}" class="text-primary">
                                                <strong>{{ entity.display_name }}</strong>
                                            </a>
                                            {% if entity.name != entity.display_name %}
                                                <br><small class="text-muted">{{ entity.name }}</small>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <span class="badge badge-{{ entity.entity_type == 'individual' ? 'primary' : (entity.entity_type == 'trust' ? 'success' : (entity.entity_type == 'business' ? 'warning' : 'info')) }}">
                                                {{ entity.entity_type|title }}
                                            </span>
                                        </td>
                                        <td>{{ entity.description|default('No description') }}</td>
                                        <td>
                                            {% set entityStats = entityService.getEntityStatistics(entity) %}
                                            {{ entityStats.owned_accounts_count }} owned
                                            {% if entityStats.beneficiary_accounts_count > 0 %}
                                                <br><small class="text-muted">{{ entityStats.beneficiary_accounts_count }} beneficiary</small>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <strong>${{ entityStats.owned_accounts_balance|number_format(2) }}</strong>
                                            {% if entityStats.beneficiary_accounts_balance > 0 %}
                                                <br><small class="text-muted">${{ entityStats.beneficiary_accounts_balance|number_format(2) }} beneficiary</small>
                                            {% endif %}
                                        </td>
                                        <td>
                                            {% include 'partials.action-buttons' with {
                                                'edit_id': entity.id,
                                                'delete_id': entity.id,
                                                'show_edit': true,
                                                'show_view': false,
                                                'show_delete': true,
                                                'delete_route': 'financial-entities.destroy',
                                                'edit_modal': true,
                                                'size': 'sm'
                                            } %}
                                        </td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="6" class="text-center text-muted">
                                            No financial entities found.
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .updated-row {
            animation: pulseHighlight 1.2s ease-in-out;
        }
        
        @keyframes pulseHighlight {
            0% {
                background-color: inherit;
            }
            50% {
                background-color: rgb(144, 148, 156);
            }
            100% {
                background-color: inherit;
            }
        }
    </style>

    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search');
            const typeFilter = document.getElementById('type-filter');
            const clearFilters = document.getElementById('clear-filters');

            // Handle delete form submissions with confirmation
            document.addEventListener('submit', function(e) {
                if (e.target.classList.contains('delete-form')) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to delete this financial entity? This action cannot be undone.')) {
                        e.target.submit();
                    }
                }
            });

            function updateFilters() {
                const params = new URLSearchParams();
                if (searchInput.value) params.set('search', searchInput.value);
                if (typeFilter.value) params.set('type', typeFilter.value);
                
                const url = new URL(window.location);
                url.search = params.toString();
                window.location.href = url.toString();
            }

            searchInput.addEventListener('input', updateFilters);
            typeFilter.addEventListener('change', updateFilters);
            
            clearFilters.addEventListener('click', function() {
                searchInput.value = '';
                typeFilter.value = '';
                updateFilters();
            });
        });
    </script>

    <!-- Edit Modal Container -->
    <div id="editModalContainer"></div>
{% endblock %}

{% block scripts %}
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        // Modal functionality
        $(document).ready(function() {
            // Handle create entity type dropdown clicks
            $(document).on('click', '.create-entity-type', function(e) {
                e.preventDefault();
                var entityType = $(this).data('type');
                loadCreateModal(entityType);
            });

            // Handle edit button click
            $(document).on('click', '.edit-btn', function(e) {
                e.preventDefault();
                var entityId = $(this).data('id');
                loadEditModal(entityId);
            });

            // Load create modal content
            function loadCreateModal(entityType) {
                var url = '{{ route("financial-entities.create.modal") }}';
                if (entityType) {
                    url += '?entity_type=' + encodeURIComponent(entityType);
                }
                
                $.get(url)
                    .done(function(data) {
                        $('#editModalContainer').html(data);
                        $('#editEntityModal').modal('show');
                        
                        // Initialize trustee selection after modal is loaded
                        initializeTrusteeSelection();
                    })
                    .fail(function() {
                        alert('Error loading create form. Please try again.');
                    });
            }

            // Load edit modal content
            function loadEditModal(entityId) {
                $.get('{{ route("financial-entities.edit.modal", ":id") }}'.replace(':id', entityId))
                    .done(function(data) {
                        $('#editModalContainer').html(data);
                        $('#editEntityModal').modal('show');
                        
                        // Initialize trustee selection after modal is loaded
                        initializeTrusteeSelection();
                    })
                    .fail(function() {
                        alert('Error loading edit form. Please try again.');
                    });
            }
            
            // Initialize trustee selection functionality
            function initializeTrusteeSelection() {
                const entityTypeSelect = document.getElementById('entity_type');
                const trusteeSelection = document.getElementById('trustee-selection');
                const trusteeSelect = document.getElementById('trustee_id');

                if (!entityTypeSelect || !trusteeSelection || !trusteeSelect) {
                    return; // Elements not found, skip initialization
                }

                // Show/hide trustee selection based on entity type
                function toggleTrusteeSelection() {
                    const type = entityTypeSelect.value;
                    if (type === 'trust') {
                        trusteeSelection.style.display = 'block';
                        trusteeSelect.required = true;
                    } else {
                        trusteeSelection.style.display = 'none';
                        trusteeSelect.required = false;
                        trusteeSelect.value = '';
                    }
                }

                // Initial check
                toggleTrusteeSelection();

                // Listen for changes
                entityTypeSelect.addEventListener('change', toggleTrusteeSelection);
            }

            // Handle form submission
            $(document).on('submit', '#editEntityForm', function(e) {
                e.preventDefault();
                
                var form = $(this);
                var entityId = form.find('input[name="entity_id"]').val();
                
                // Collect all form data using the same field definitions used to create the form
                var formData = {};
                
                // Always include these fields
                formData.entity_type = form.find('#entity_type').val() || '';
                formData.trustee_id = form.find('#trustee_id').val() || null;
                
                // Include CSRF token and method for Laravel
                formData._token = form.find('input[name="_token"]').val();
                formData._method = form.find('input[name="_method"]').val();
                
                // Get the current entity type to determine which fields to collect
                var entityType = formData.entity_type;
                
                if (entityType && window.currentFields && window.currentFields[entityType]) {
                    var fields = window.currentFields[entityType];
                    
                    // Collect data for all fields defined for this entity type
                    Object.keys(fields).forEach(function(fieldName) {
                        var fieldElement = form.find('[name="' + fieldName + '"]');
                        if (fieldElement.length > 0) {
                            if (fieldElement.attr('type') === 'checkbox') {
                                formData[fieldName] = fieldElement.is(':checked');
                            } else {
                                formData[fieldName] = fieldElement.val() || '';
                            }
                        } else {
                            // Field not found in form, set to empty
                            formData[fieldName] = '';
                        }
                    });
                }
                
                // Disable submit button
                $('#saveEntityBtn').prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> Saving...');
                
                // Determine if this is create or update
                var isCreate = !entityId || entityId === '';
                var url = isCreate ? '{{ route("financial-entities.store.modal") }}' : '{{ route("financial-entities.update.modal", ":id") }}'.replace(':id', entityId);
                var method = isCreate ? 'POST' : 'PUT';
                
                $.ajax({
                    url: url,
                    type: method,
                    data: formData,
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8'
                })
                    .done(function(response) {
                        if (response.success) {
                            if (isCreate) {
                                // For create, reload the page to show the new entity
                                window.location.reload();
                            } else {
                                // For update, update the table row with new data
                                updateEntityRow(response.entity);
                            }
                            
                            // Close modal
                            $('#editEntityModal').modal('hide');
                            
                            // Show success message
                            showAlert('success', response.message);
                        } else {
                            showAlert('error', response.message || 'An error occurred while saving.');
                        }
                    })
                    .fail(function(xhr) {
                        var response = xhr.responseJSON;
                        if (response && response.errors) {
                            // Display validation errors
                            displayValidationErrors(response.errors);
                        } else {
                            showAlert('error', 'An error occurred while saving. Please try again.');
                        }
                    })
                    .always(function() {
                        // Re-enable submit button
                        $('#saveEntityBtn').prop('disabled', false).html('<i class="fa fa-save"></i> {{ "save_changes"|_ }}');
                    });
            });

            // Update entity row with new data
            function updateEntityRow(entity) {
                var row = $('.edit-btn[data-id="' + entity.id + '"]').closest('tr');
                
                // Update entity name link
                var nameCell = row.find('td:first');
                var nameLink = nameCell.find('a');
                
                if (nameLink.length) {
                    // Update the link text with display name
                    nameLink.html('<strong>' + (entity.display_name || entity.name) + '</strong>');
                    
                    // Update or create the small name element
                    var smallName = nameCell.find('small.text-muted');
                    if (entity.name && entity.name !== entity.display_name) {
                        if (smallName.length) {
                            smallName.text(entity.name);
                        } else {
                            nameCell.append('<br><small class="text-muted">' + entity.name + '</small>');
                        }
                    } else {
                        // Remove the small name element if names are the same
                        smallName.remove();
                    }
                } else {
                    // Create new link structure
                    var linkHtml = '<a href="{{ route("financial-entities.show", ":id") }}'.replace(':id', entity.id) + '" class="text-primary"><strong>' + (entity.display_name || entity.name) + '</strong></a>';
                    if (entity.name && entity.name !== entity.display_name) {
                        linkHtml += '<br><small class="text-muted">' + entity.name + '</small>';
                    }
                    nameCell.html(linkHtml);
                }
                
                // Update entity type
                var badgeClass = getBadgeClass(entity.entity_type);
                var badge = row.find('.badge');
                badge.removeClass().addClass('badge badge-' + badgeClass).text(
                    entity.entity_type.charAt(0).toUpperCase() + entity.entity_type.slice(1)
                );
                
                // Update description if column exists
                var descCell = row.find('td').eq(2);
                if (descCell.length) {
                    descCell.text(entity.description || '-');
                }
                
                // Force a visual update by adding a temporary class
                row.addClass('updated-row');
                setTimeout(function() {
                    row.removeClass('updated-row');
                }, 1200);
            }

            // Get badge class based on entity type
            function getBadgeClass(entityType) {
                switch(entityType) {
                    case 'individual': return 'primary';
                    case 'trust': return 'success';
                    case 'business': return 'warning';
                    case 'advisor': return 'info';
                    case 'custodian': return 'secondary';
                    default: return 'secondary';
                }
            }

            // Display validation errors
            function displayValidationErrors(errors) {
                // Clear previous errors
                $('.text-danger').hide().text('');
                
                // Display new errors
                $.each(errors, function(field, messages) {
                    var errorElement = $('#' + field.replace('.', '_') + '_error');
                    if (errorElement.length) {
                        errorElement.text(messages[0]).show();
                    }
                });
            }

            // Show alert message
            function showAlert(type, message) {
                var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible" style="margin-top: 20px;">' +
                               '<button type="button" class="close" data-dismiss="alert">&times;</button>' +
                               message +
                               '</div>';
                
                $('.box-body').prepend(alertHtml);
                
                // Auto-dismiss after 5 seconds
                setTimeout(function() {
                    $('.alert').fadeOut();
                }, 5000);
            }

            // Clear modal when hidden
            $(document).on('hidden.bs.modal', '#editEntityModal', function() {
                $('#editModalContainer').empty();
            });
        });
    </script>
{% endblock %}
