{% extends './layout/default' %}

{% set shownDemo = true %}

{% block title %}
    Financial Entities
{% endblock %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.getCurrentRoute().getName()) }}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box" id="financial-entities-index">
                <div class="box-header with-border">
                    <h3 class="box-title">
                        <i class="fa fa-users"></i>
                        Financial Entities
                    </h3>
                    <div class="box-tools pull-right">
                        <!-- Bulk Actions (hidden by default) -->
                        <div id="bulk-actions" class="btn-group" style="display: none; margin-right: 10px;">
                            <button type="button" id="bulk-delete-btn" class="btn btn-danger btn-sm">
                                <i class="fa fa-trash"></i>
                                Delete Selected
                            </button>
                        </div>
                        
                        <!-- Settings dropdown -->
                        <div class="btn-group" style="margin-right: 10px;">
                            <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" title="Settings">
                                <i class="fa fa-cog"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-right">
                                <li><a href="#" id="resetConfirmations">
                                    <i class="fa fa-refresh"></i> Reset confirmation dialogs
                                </a></li>
                            </ul>
                        </div>
                        
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fa fa-plus"></i>
                                Add Entity
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a href="#" class="create-entity-type" data-type="individual">
                                    <i class="fa fa-user"></i> Individual
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="trust">
                                    <i class="fa fa-shield"></i> Trust
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="business">
                                    <i class="fa fa-building"></i> Business
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="advisor">
                                    <i class="fa fa-graduation-cap"></i> Advisor
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="custodian">
                                    <i class="fa fa-lock"></i> Custodian
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="plan_administrator">
                                    <i class="fa fa-cogs"></i> Plan Administrator
                                </a></li>
                                <li><a href="#" class="create-entity-type" data-type="institution">
                                    <i class="fa fa-university"></i> Institution
                                </a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="box-body">
                    <!-- Search and Filter -->
                    <div class="row" style="margin-bottom: 15px;">
                        <div class="col-md-6">
                            <input type="text" id="search" class="form-control" placeholder="Search entities..." value="{{ searchQuery }}">
                        </div>
                        <div class="col-md-4">
                            <select id="type-filter" class="form-control">
                                <option value="">All Types</option>
                                <option value="individual" {{ typeFilter == 'individual' ? 'selected' : '' }}>Individuals</option>
                                <option value="trust" {{ typeFilter == 'trust' ? 'selected' : '' }}>Trusts</option>
                                <option value="business" {{ typeFilter == 'business' ? 'selected' : '' }}>Businesses</option>
                                <option value="advisor" {{ typeFilter == 'advisor' ? 'selected' : '' }}>Advisors</option>
                                <option value="custodian" {{ typeFilter == 'custodian' ? 'selected' : '' }}>Custodians</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="button" id="clear-filters" class="btn btn-secondary btn-block">Clear</button>
                        </div>
                    </div>

                    <!-- Entities Table -->
                    <div class="table-responsive">
                        <table class="table sortable table-striped table-hover" id="financial-entities-table">
                            <thead>
                                <tr>
                                    <th data-defaultsort="disabled" style="width: 40px;">
                                        <input type="checkbox" id="select-all" title="Select all entities">
                                    </th>
                                    <th data-defaultsign="az">Name</th>
                                    <th data-defaultsign="az">Type</th>
                                    <th data-defaultsign="az">Description</th>
                                    <th data-defaultsign="_19">Accounts</th>
                                    <th data-defaultsign="_19">Total Balance</th>
                                    <th data-defaultsort="disabled">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for entity in entities %}
                                    {% set entityStats = entityService.getEntityStatistics(entity) %}
                                    <tr data-entity-id="{{ entity.id }}" class="entity-row">
                                        <td>
                                            <input type="checkbox" class="entity-checkbox" value="{{ entity.id }}">
                                        </td>
                                        <td data-value="{{ entity.display_name|lower }}">
                                            <a href="{{ route('financial-entities.show', entity.id) }}" class="text-primary">
                                                <strong>{{ entity.display_name }}</strong>
                                            </a>
                                            {% if entity.name != entity.display_name %}
                                                <br><small class="text-muted">{{ entity.name }}</small>
                                            {% endif %}
                                        </td>
                                        <td data-value="{{ entity.entity_type|lower }}">
                                            <span class="badge badge-{{ entity.entity_type == 'individual' ? 'primary' : (entity.entity_type == 'trust' ? 'success' : (entity.entity_type == 'business' ? 'warning' : 'info')) }}">
                                                {{ entity.entity_type|title }}
                                            </span>
                                        </td>
                                        <td data-value="{{ entity.description|default('')|lower }}">{{ entity.description|default('No description') }}</td>
                                        <td data-value="{{ entityStats.owned_accounts_count }}">
                                            {{ entityStats.owned_accounts_count }} owned
                                            {% if entityStats.beneficiary_accounts_count > 0 %}
                                                <br><small class="text-muted">{{ entityStats.beneficiary_accounts_count }} beneficiary</small>
                                            {% endif %}
                                        </td>
                                        <td data-value="{{ entityStats.owned_accounts_balance }}" style="text-align: right;">
                                            <strong>${{ entityStats.owned_accounts_balance|number_format(2) }}</strong>
                                            {% if entityStats.beneficiary_accounts_balance > 0 %}
                                                <br><small class="text-muted">${{ entityStats.beneficiary_accounts_balance|number_format(2) }} beneficiary</small>
                                            {% endif %}
                                        </td>
                                        <td>
                                            {% include 'partials.action-buttons' with {
                                                'edit_id': entity.id,
                                                'delete_id': entity.id,
                                                'show_edit': true,
                                                'show_view': false,
                                                'show_delete': true,
                                                'delete_route': 'financial-entities.destroy',
                                                'edit_modal': true,
                                                'size': 'sm'
                                            } %}
                                        </td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="7" class="text-center text-muted">
                                            No financial entities found.
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .updated-row {
            animation: pulseHighlight 1.2s ease-in-out;
        }
        
        @keyframes pulseHighlight {
            0% {
                background-color: inherit;
            }
            50% {
                background-color: rgb(144, 148, 156);
            }
            100% {
                background-color: inherit;
            }
        }
        
        /* Row selection styles */
        .entity-row {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        .entity-row:hover {
            background-color: #f5f5f5;
        }
        
        .entity-row.selected {
            background-color: #3a4045 !important;
            border-left: 2px solid #5a6065;
        }
        
        .entity-row.selected:hover {
            background-color: #2e3439 !important;
        }
        
        /* Prevent text selection on checkboxes */
        .entity-checkbox {
            cursor: pointer;
            pointer-events: auto;
        }
        
        /* Bulk actions styling */
        #bulk-actions {
            animation: slideIn 0.3s ease-in-out;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        /* Disable row click on action buttons */
        .entity-row td:last-child {
            pointer-events: auto;
        }
        
        .entity-row td:last-child * {
            pointer-events: auto;
        }
    </style>

    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search');
            const typeFilter = document.getElementById('type-filter');
            const clearFilters = document.getElementById('clear-filters');
            const selectAllCheckbox = document.getElementById('select-all');
            const bulkActions = document.getElementById('bulk-actions');
            const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
            
            let selectedEntities = new Set();
            let lastSelectedIndex = -1;

            // Handle delete form submissions with confirmation
            document.addEventListener('submit', function(e) {
                if (e.target.classList.contains('delete-form')) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to delete this financial entity? This action cannot be undone.')) {
                        e.target.submit();
                    }
                }
            });

            function updateFilters() {
                const params = new URLSearchParams();
                if (searchInput.value) params.set('search', searchInput.value);
                if (typeFilter.value) params.set('type', typeFilter.value);
                
                const url = new URL(window.location);
                url.search = params.toString();
                window.location.href = url.toString();
            }

            searchInput.addEventListener('input', updateFilters);
            typeFilter.addEventListener('change', updateFilters);
            
            clearFilters.addEventListener('click', function() {
                searchInput.value = '';
                typeFilter.value = '';
                updateFilters();
            });

            // Multi-select functionality
            function updateBulkActions() {
                if (selectedEntities.size > 0) {
                    bulkActions.style.display = 'inline-block';
                    bulkDeleteBtn.textContent = `Delete Selected (${selectedEntities.size})`;
                } else {
                    bulkActions.style.display = 'none';
                }
            }

            function updateSelectAllState() {
                const checkboxes = document.querySelectorAll('.entity-checkbox');
                const checkedCount = document.querySelectorAll('.entity-checkbox:checked').length;
                
                if (checkedCount === 0) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                } else if (checkedCount === checkboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.indeterminate = true;
                }
            }

            function toggleRowSelection(row, isSelected) {
                if (isSelected) {
                    row.classList.add('selected');
                } else {
                    row.classList.remove('selected');
                }
            }

            function selectEntity(entityId, isSelected) {
                const row = document.querySelector(`tr[data-entity-id="${entityId}"]`);
                const checkbox = row.querySelector('.entity-checkbox');
                
                if (isSelected) {
                    selectedEntities.add(entityId);
                    checkbox.checked = true;
                } else {
                    selectedEntities.delete(entityId);
                    checkbox.checked = false;
                }
                
                toggleRowSelection(row, isSelected);
                updateBulkActions();
                updateSelectAllState();
            }

            function selectRange(startIndex, endIndex) {
                const rows = Array.from(document.querySelectorAll('.entity-row'));
                const start = Math.min(startIndex, endIndex);
                const end = Math.max(startIndex, endIndex);
                
                for (let i = start; i <= end; i++) {
                    if (rows[i]) {
                        const entityId = rows[i].dataset.entityId;
                        selectEntity(entityId, true);
                    }
                }
            }

            // Handle select all checkbox
            selectAllCheckbox.addEventListener('change', function() {
                const checkboxes = document.querySelectorAll('.entity-checkbox');
                const isChecked = this.checked;
                
                checkboxes.forEach(checkbox => {
                    const entityId = checkbox.value;
                    selectEntity(entityId, isChecked);
                });
            });

            // Handle individual checkbox changes
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('entity-checkbox')) {
                    const entityId = e.target.value;
                    const isSelected = e.target.checked;
                    selectEntity(entityId, isSelected);
                }
            });

            // Handle row clicks
            document.addEventListener('click', function(e) {
                const row = e.target.closest('.entity-row');
                if (!row) return;
                
                // Don't trigger row selection if clicking on checkbox or action buttons
                if (e.target.type === 'checkbox' || 
                    e.target.closest('button') || 
                    e.target.closest('a') ||
                    e.target.closest('.dropdown-menu')) {
                    return;
                }
                
                const entityId = row.dataset.entityId;
                const checkbox = row.querySelector('.entity-checkbox');
                const isCurrentlySelected = selectedEntities.has(entityId);
                
                if (e.metaKey || e.ctrlKey) {
                    // Cmd/Ctrl + click: toggle selection
                    selectEntity(entityId, !isCurrentlySelected);
                } else if (e.shiftKey && lastSelectedIndex !== -1) {
                    // Shift + click: select range
                    const rows = Array.from(document.querySelectorAll('.entity-row'));
                    const currentIndex = rows.indexOf(row);
                    selectRange(lastSelectedIndex, currentIndex);
                } else {
                    // Regular click: select only this row
                    // Clear all selections first
                    selectedEntities.forEach(id => selectEntity(id, false));
                    selectedEntities.clear();
                    
                    // Select this row
                    selectEntity(entityId, true);
                }
                
                // Update last selected index
                const rows = Array.from(document.querySelectorAll('.entity-row'));
                lastSelectedIndex = rows.indexOf(row);
            });

            // Handle bulk delete
            bulkDeleteBtn.addEventListener('click', function() {
                if (selectedEntities.size === 0) return;
                
                const count = selectedEntities.size;
                showDeleteConfirmationModal(count, function() {
                    // Show loading state
                    bulkDeleteBtn.disabled = true;
                    bulkDeleteBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Deleting...';
                    
                    // Prepare form data
                    const formData = new FormData();
                    formData.append('_token', '{{ csrf_token() }}');
                    formData.append('_method', 'DELETE');
                    
                    // Add selected entity IDs
                    selectedEntities.forEach(entityId => {
                        formData.append('entity_ids[]', entityId);
                    });
                    
                    // Make AJAX request
                    fetch('{{ route("financial-entities.bulk-destroy") }}', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok');
                    })
                    .then(data => {
                        if (data.success) {
                            // Remove deleted rows from the table
                            selectedEntities.forEach(entityId => {
                                const row = document.querySelector(`tr[data-entity-id="${entityId}"]`);
                                if (row) {
                                    row.remove();
                                }
                            });
                            
                            // Clear selection
                            selectedEntities.clear();
                            updateBulkActions();
                            updateSelectAllState();
                            
                            // Show success message
                            showSuccessMessage(data.message);
                            
                            // Check if table is now empty
                            const remainingRows = document.querySelectorAll('.entity-row');
                            if (remainingRows.length === 0) {
                                const tbody = document.querySelector('#financial-entities-table tbody');
                                tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">No financial entities found.</td></tr>';
                            }
                        } else {
                            // Show error message
                            showErrorMessage(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showErrorMessage('An error occurred while deleting the entities. Please try again.');
                    })
                    .finally(() => {
                        // Reset button state
                        bulkDeleteBtn.disabled = false;
                        bulkDeleteBtn.innerHTML = '<i class="fa fa-trash"></i> Delete Selected';
                    });
                });
            });

            // Check if user has disabled delete confirmation
            function shouldShowDeleteConfirmation() {
                return localStorage.getItem('hideDeleteConfirmation') !== 'true';
            }
            
            // Show delete confirmation modal
            function showDeleteConfirmationModal(count, onConfirm) {
                if (!shouldShowDeleteConfirmation()) {
                    onConfirm();
                    return;
                }
                
                const modalHtml = `
                    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title">
                                        <i class="fa fa-exclamation-triangle text-warning"></i>
                                        Confirm Deletion
                                    </h4>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <p>Are you sure you want to delete <strong>${count}</strong> financial entit${count === 1 ? 'y' : 'ies'}?</p>
                                    <p class="text-muted">This action cannot be undone.</p>
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" id="dontShowAgain"> Don't show this message again
                                        </label>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                                        <i class="fa fa-trash"></i> Delete ${count} Entit${count === 1 ? 'y' : 'ies'}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Remove existing modal if any
                const existingModal = document.getElementById('deleteConfirmationModal');
                if (existingModal) {
                    existingModal.remove();
                }
                
                // Add modal to page
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                
                // Show modal
                $('#deleteConfirmationModal').modal('show');
                
                // Handle confirm button click
                document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
                    const dontShowAgain = document.getElementById('dontShowAgain').checked;
                    if (dontShowAgain) {
                        localStorage.setItem('hideDeleteConfirmation', 'true');
                    }
                    
                    $('#deleteConfirmationModal').modal('hide');
                    onConfirm();
                });
                
                // Clean up modal when hidden
                $('#deleteConfirmationModal').on('hidden.bs.modal', function() {
                    $(this).remove();
                });
            }

            // Helper functions for showing messages
            function showSuccessMessage(message) {
                showAlert(message, 'success');
            }
            
            function showErrorMessage(message) {
                showAlert(message, 'danger');
            }
            
            function showAlert(message, type) {
                // Remove any existing alerts
                const existingAlert = document.querySelector('.alert');
                if (existingAlert) {
                    existingAlert.remove();
                }
                
                // Create new alert
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade in`;
                alert.style.marginTop = '10px';
                alert.innerHTML = `
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <strong>${type === 'success' ? 'Success!' : 'Error!'}</strong> ${message}
                `;
                
                // Insert after the box header
                const boxHeader = document.querySelector('.box-header');
                boxHeader.insertAdjacentElement('afterend', alert);
                
                // Auto-dismiss success messages after 3 seconds
                if (type === 'success') {
                    setTimeout(() => {
                        if (alert.parentNode) {
                            alert.remove();
                        }
                    }, 3000);
                }
            }

            // Handle reset confirmations
            document.getElementById('resetConfirmations').addEventListener('click', function(e) {
                e.preventDefault();
                localStorage.removeItem('hideDeleteConfirmation');
                showSuccessMessage('Confirmation dialogs have been re-enabled.');
            });

            // Initialize bulk actions state
            updateBulkActions();
        });
    </script>

    <!-- Edit Modal Container -->
    <div id="editModalContainer"></div>
{% endblock %}

{% block scripts %}
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        // Modal functionality
        $(document).ready(function() {
            // Handle create entity type dropdown clicks
            $(document).on('click', '.create-entity-type', function(e) {
                e.preventDefault();
                var entityType = $(this).data('type');
                loadCreateModal(entityType);
            });

            // Handle edit button click
            $(document).on('click', '.edit-btn', function(e) {
                e.preventDefault();
                var entityId = $(this).data('id');
                loadEditModal(entityId);
            });

            // Load create modal content
            function loadCreateModal(entityType) {
                var url = '{{ route("financial-entities.create.modal") }}';
                if (entityType) {
                    url += '?entity_type=' + encodeURIComponent(entityType);
                }
                
                $.get(url)
                    .done(function(data) {
                        $('#editModalContainer').html(data);
                        $('#editEntityModal').modal('show');
                        
                        // Initialize trustee selection after modal is loaded
                        initializeTrusteeSelection();
                    })
                    .fail(function() {
                        alert('Error loading create form. Please try again.');
                    });
            }

            // Load edit modal content
            function loadEditModal(entityId) {
                // Load modal once if not already loaded
                if ($('#editEntityModal').length === 0) {
                    $.get('{{ route('financial-entities.edit.modal.new') }}')
                        .done(function(data) {
                            $('#editModalContainer').html(data);
                            // Now load the entity data
                            loadEntityEditModal(entityId);
                        })
                        .fail(function() {
                            alert('Error loading edit form. Please try again.');
                        });
                } else {
                    // Modal already loaded, just load the entity data
                    loadEntityEditModal(entityId);
                }
            }
            
            // Initialize trustee selection functionality
            function initializeTrusteeSelection() {
                const entityTypeSelect = document.getElementById('entity_type');
                const trusteeSelection = document.getElementById('trustee-selection');
                const trusteeSelect = document.getElementById('trustee_id');

                if (!entityTypeSelect || !trusteeSelection || !trusteeSelect) {
                    return; // Elements not found, skip initialization
                }

                // Show/hide trustee selection based on entity type
                function toggleTrusteeSelection() {
                    const type = entityTypeSelect.value;
                    if (type === 'trust') {
                        trusteeSelection.style.display = 'block';
                        trusteeSelect.required = true;
                    } else {
                        trusteeSelection.style.display = 'none';
                        trusteeSelect.required = false;
                        trusteeSelect.value = '';
                    }
                }

                // Initial check
                toggleTrusteeSelection();

                // Listen for changes
                entityTypeSelect.addEventListener('change', toggleTrusteeSelection);
            }

            // Form submission is now handled by the shared modal component

            // Update entity row with new data
            function updateEntityRow(entity) {
                var row = $('.edit-btn[data-id="' + entity.id + '"]').closest('tr');
                
                // Update entity name link
                var nameCell = row.find('td:first');
                var nameLink = nameCell.find('a');
                
                if (nameLink.length) {
                    // Update the link text with display name
                    nameLink.html('<strong>' + (entity.display_name || entity.name) + '</strong>');
                    
                    // Update or create the small name element
                    var smallName = nameCell.find('small.text-muted');
                    if (entity.name && entity.name !== entity.display_name) {
                        if (smallName.length) {
                            smallName.text(entity.name);
                        } else {
                            nameCell.append('<br><small class="text-muted">' + entity.name + '</small>');
                        }
                    } else {
                        // Remove the small name element if names are the same
                        smallName.remove();
                    }
                } else {
                    // Create new link structure
                    var linkHtml = '<a href="{{ route("financial-entities.show", ":id") }}'.replace(':id', entity.id) + '" class="text-primary"><strong>' + (entity.display_name || entity.name) + '</strong></a>';
                    if (entity.name && entity.name !== entity.display_name) {
                        linkHtml += '<br><small class="text-muted">' + entity.name + '</small>';
                    }
                    nameCell.html(linkHtml);
                }
                
                // Update entity type
                var badgeClass = getBadgeClass(entity.entity_type);
                var badge = row.find('.badge');
                badge.removeClass().addClass('badge badge-' + badgeClass).text(
                    entity.entity_type.charAt(0).toUpperCase() + entity.entity_type.slice(1)
                );
                
                // Update description if column exists
                var descCell = row.find('td').eq(2);
                if (descCell.length) {
                    descCell.text(entity.description || '-');
                }
                
                // Force a visual update by adding a temporary class
                row.addClass('updated-row');
                setTimeout(function() {
                    row.removeClass('updated-row');
                }, 1200);
            }

            // Get badge class based on entity type
            function getBadgeClass(entityType) {
                switch(entityType) {
                    case 'individual': return 'primary';
                    case 'trust': return 'success';
                    case 'business': return 'warning';
                    case 'advisor': return 'info';
                    case 'custodian': return 'secondary';
                    default: return 'secondary';
                }
            }

            // Error display functions are now handled by the shared modal component

            // Clear modal when hidden
            $(document).on('hidden.bs.modal', '#editEntityModal', function() {
                $('#editModalContainer').empty();
            });
        });
    </script>
    
    <!-- Table Sorting Assets -->
    <link rel="stylesheet" href="{{ asset('css/table-sorting.css') }}" type="text/css" media="all" nonce="{{ JS_NONCE }}">
    <script src="{{ asset('v1/js/lib/bootstrap-sortable.js') }}" nonce="{{ JS_NONCE }}"></script>
    <script src="{{ asset('js/table-sorting.js') }}" nonce="{{ JS_NONCE }}"></script>
{% endblock %}
